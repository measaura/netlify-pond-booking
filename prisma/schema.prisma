generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  name               String?
  password           String?
  role               UserRole           @default(USER)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  bookingsLeader     Booking[]          @relation("BookingLeader")
  assignedSeats      BookingSeat[]      @relation("AssignedSeats")
  catchRecords       CatchRecord[]
  checkIns           CheckInRecord[]
  assignedRods       FishingRod[]
  leaderboardEntries LeaderboardEntry[]
  notifications      Notification[]
  rodPrintSessions   RodPrintSession[]
  weighingRecords    WeighingRecord[]
}

model Pond {
  id                 Int         @id @default(autoincrement())
  name               String
  image              String?
  maxCapacity        Int
  price              Float
  bookingEnabled     Boolean     @default(true)
  shape              PondShape   @default(RECTANGLE)
  seatingArrangement Json?
  bookings           Booking[]
  eventPonds         EventPond[]
}

model Event {
  id                 Int                @id @default(autoincrement())
  name               String
  description        String?
  date               DateTime
  startTime          String
  endTime            String
  maxParticipants    Int
  maxSeatsPerBooking Int
  entryFee           Float
  bookingOpens       DateTime
  status             String             @default("upcoming")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  bookings           Booking[]
  catchRecords       CatchRecord[]
  eventLeaderboards  EventLeaderboard[]
  eventPonds         EventPond[]
  eventGames         EventGame[]        // Many-to-many with Games (through EventGame junction)
  specialPrizes      SpecialPrize[]     // Grand Prize and Lucky Draw prizes
  leaderboardEntries LeaderboardEntry[]
  weighingRecords    WeighingRecord[]
}

model EventPond {
  id      Int   @id @default(autoincrement())
  eventId Int
  pondId  Int
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  pond    Pond  @relation(fields: [pondId], references: [id], onDelete: Cascade)

  @@unique([eventId, pondId])
}

model Booking {
  id              Int             @id @default(autoincrement())
  bookingId       String          @unique
  type            BookingType
  pondId          Int?
  eventId         Int?
  date            DateTime
  timeSlotId      Int?
  seatsBooked     Int             @default(1)
  totalPrice      Float
  createdAt       DateTime        @default(now())
  bookedByUserId  Int
  status          String          @default("confirmed")
  bookedBy        User            @relation("BookingLeader", fields: [bookedByUserId], references: [id])
  event           Event?          @relation(fields: [eventId], references: [id])
  pond            Pond?           @relation(fields: [pondId], references: [id])
  timeSlot        TimeSlot?       @relation(fields: [timeSlotId], references: [id])
  seatAssignments BookingSeat[]
  catchRecords    CatchRecord[]
  checkIns        CheckInRecord[]
}

model BookingSeat {
  id              Int               @id @default(autoincrement())
  bookingId       Int
  seatNumber      Int
  assignedUserId  Int?
  assignedName    String?
  assignedEmail   String?
  qrCode          String            @unique
  status          String            @default("assigned")
  checkedInAt     DateTime?
  createdAt       DateTime          @default(now())
  assignedUser    User?             @relation("AssignedSeats", fields: [assignedUserId], references: [id])
  booking         Booking           @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  checkInRecords  CheckInRecord[]
  fishingRod      FishingRod?
  printSessions   RodPrintSession[]
  weighingRecords WeighingRecord[]

  @@unique([bookingId, seatNumber])
}

model TimeSlot {
  id       Int       @id @default(autoincrement())
  time     String
  label    String
  bookings Booking[]
}

model Game {
  id              Int              @id @default(autoincrement())
  name            String           // Template name (e.g., "Heaviest Fish", "Target Weight Challenge")
  type            GameType
  targetWeight    Float?
  measurementUnit String           @default("kg")
  decimalPlaces   Int              @default(2)
  description     String?
  isActive        Boolean          @default(true)
  
  // Game is now a reusable template (NO eventId)
  eventGames      EventGame[]      // Many-to-many with Events through EventGame
  
  catchRecords    CatchRecord[]
  weighingRecords WeighingRecord[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// NEW: Junction table for Event â†” Game with custom naming and prize set assignment
model EventGame {
  id              Int         @id @default(autoincrement())
  event           Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         Int
  game            Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId          Int
  prizeSet        PrizeSet?   @relation(fields: [prizeSetId], references: [id])
  prizeSetId      Int?
  
  // Custom game name for this specific event (can override template name)
  customGameName  String?     // e.g., "King of the Lake Challenge" instead of "Heaviest Fish"
  
  displayOrder    Int         @default(0) // Order to display games in event
  isActive        Boolean     @default(true)
  
  @@unique([eventId, gameId])
}

// NEW: Reusable prize sets (collections of prizes)
model PrizeSet {
  id          Int       @id @default(autoincrement())
  name        String    // e.g., "Standard Podium", "Big Pool", "Single Winner"
  description String?
  isActive    Boolean   @default(true)
  
  prizes      Prize[]   // One-to-many with Prizes
  eventGames  EventGame[] // Which events/games use this prize set
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Prize {
  id          Int       @id @default(autoincrement())
  name        String    // e.g., "1st Place", "2nd-5th Place", "Consolation"
  type        PrizeType
  value       Float     // Prize amount or item value
  rankStart   Int       // Starting rank (e.g., 1 for 1st place)
  rankEnd     Int       // Ending rank (e.g., 1 for 1st place only, 10 for ranks 4-10)
  description String?   // Description of item if type is ITEM
  isActive    Boolean   @default(true)
  
  // Prize belongs to a PrizeSet (not directly to Game)
  prizeSet    PrizeSet  @relation(fields: [prizeSetId], references: [id], onDelete: Cascade)
  prizeSetId  Int
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// NEW: Special prizes for events (Grand Prize, Lucky Draw)
model SpecialPrize {
  id          Int       @id @default(autoincrement())
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     Int
  
  type        String    // "GRAND_PRIZE" or "LUCKY_DRAW"
  name        String    // e.g., "Grand Champion Prize", "Lucky Draw #1"
  prizeType   PrizeType // MONEY or ITEM
  value       Float     // Prize value
  description String?   // Description if ITEM
  
  // For Grand Prize (auto-calculated)
  winnerId    Int?      // User who won (calculated from overall points)
  autoAwarded Boolean   @default(false) // If true, system calculates winner
  
  // For Lucky Draw (manual)
  drawnAt     DateTime? // When the draw was conducted
  drawnBy     String?   // Admin who conducted the draw
  winnerSeatId Int?     // BookingSeat ID of the winner
  
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FishingRod {
  id              Int               @id @default(autoincrement())
  qrCode          String            @unique
  serialNumber    String?
  version         Int               @default(1)
  status          String            @default("active")
  bookingSeatId   Int?              @unique
  assignedUserId  Int?
  printedAt       DateTime          @default(now())
  voidedAt        DateTime?
  voidReason      String?
  previousQrCode  String?
  printStationId  String?
  selfPrinted     Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  catchRecords    CatchRecord[]
  checkInRecords  CheckInRecord[]
  assignedUser    User?             @relation(fields: [assignedUserId], references: [id])
  bookingSeat     BookingSeat?      @relation(fields: [bookingSeatId], references: [id])
  printSessions   RodPrintSession[]
  weighingRecords WeighingRecord[]
}

model RodPrintSession {
  id                Int         @id @default(autoincrement())
  scannedQrCode     String
  bookingSeatId     Int
  userId            Int
  stationId         String
  ipAddress         String?
  sessionStatus     String      @default("pending")
  eventValid        Boolean
  validationMessage String?
  rodQrCode         String?
  createdAt         DateTime    @default(now())
  printedAt         DateTime?
  expiresAt         DateTime
  bookingSeat       BookingSeat @relation(fields: [bookingSeatId], references: [id])
  fishingRod        FishingRod? @relation(fields: [rodQrCode], references: [qrCode])
  user              User        @relation(fields: [userId], references: [id])
}

model WeighingRecord {
  id                 Int          @id @default(autoincrement())
  rodQrCode          String
  userId             Int
  bookingSeatId      Int?
  eventId            Int
  gameId             Int
  weight             Float
  length             Float?
  species            String?
  weighedAt          DateTime     @default(now())
  weighedBy          String
  scaleId            String?
  isVerified         Boolean      @default(true)
  photo              String?
  video              String?
  notes              String?
  leaderboardUpdated Boolean      @default(false)
  rankAtTime         Int?
  createdAt          DateTime     @default(now())
  bookingSeat        BookingSeat? @relation(fields: [bookingSeatId], references: [id])
  event              Event        @relation(fields: [eventId], references: [id])
  game               Game         @relation(fields: [gameId], references: [id])
  fishingRod         FishingRod   @relation(fields: [rodQrCode], references: [qrCode])
  user               User         @relation(fields: [userId], references: [id])
}

model CheckInRecord {
  id            Int          @id @default(autoincrement())
  bookingId     Int
  userId        Int
  checkInAt     DateTime
  checkOutAt    DateTime?
  scannedBy     String?
  status        String       @default("checked-in")
  bookingSeatId Int?
  rodQrCode     String?
  booking       Booking      @relation(fields: [bookingId], references: [id])
  bookingSeat   BookingSeat? @relation(fields: [bookingSeatId], references: [id])
  fishingRod    FishingRod?  @relation(fields: [rodQrCode], references: [qrCode])
  user          User         @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  priority  String   @default("medium")
  actionUrl String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model CatchRecord {
  id         Int         @id @default(autoincrement())
  bookingId  Int
  userId     Int
  eventId    Int?
  gameId     Int?
  weight     Float?
  length     Float?
  species    String?
  photo      String?
  isVerified Boolean     @default(false)
  recordedBy String
  notes      String?
  createdAt  DateTime    @default(now())
  rodQrCode  String?
  booking    Booking     @relation(fields: [bookingId], references: [id])
  event      Event?      @relation(fields: [eventId], references: [id])
  game       Game?       @relation(fields: [gameId], references: [id])
  fishingRod FishingRod? @relation(fields: [rodQrCode], references: [qrCode])
  user       User        @relation(fields: [userId], references: [id])
}

model LeaderboardEntry {
  id                 Int               @id @default(autoincrement())
  eventId            Int
  userId             Int
  gameId             Int?
  value              Float
  rank               Int
  points             Int               @default(0)
  eventLeaderboardId Int?
  totalPoints        Int               @default(0)
  event              Event             @relation(fields: [eventId], references: [id])
  eventLeaderboard   EventLeaderboard? @relation(fields: [eventLeaderboardId], references: [id])
  user               User              @relation(fields: [userId], references: [id])

  @@unique([eventId, userId, gameId])
}

model EventLeaderboard {
  id          Int                @id @default(autoincrement())
  eventId     Int
  gameId      Int?
  lastUpdated DateTime           @default(now())
  event       Event              @relation(fields: [eventId], references: [id])
  entries     LeaderboardEntry[]

  @@unique([eventId, gameId])
}

enum UserRole {
  USER
  MANAGER
  ADMIN
}

enum BookingType {
  POND
  EVENT
}

enum GameType {
  TARGET_WEIGHT
  EXACT_WEIGHT
  HEAVIEST_WEIGHT
}

enum PondShape {
  RECTANGLE
  SQUARE
  CIRCLE
}

enum PrizeType {
  MONEY
  ITEM
}
